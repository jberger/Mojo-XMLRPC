=encoding utf8

=head1 NAME

Mojo::XMLRPC - An XMLRPC message parser/encoder using the Mojo stack

=head1 SYNOPSIS

  use Mojo::UserAgent;
  use Mojo::XMLRPC qw[to_xmlrpc from_xmlrpc];

  my $ua = Mojo::UserAgent->new;
  my $url = ...;
  my $tx = $ua->post($url, encode_xmlrpc(request => 'mymethod', 'myarg'));
  my $res = decode_xmlrpc($tx->res->body)

=head1 DESCRIPTION

L<Mojo::XMLRPC> is a pure-perl XML-RPC message parser and encoder.
It uses tools from the L<Mojo> toolkit to do all of the work.

This does not mean that it must only be used in conjunction with a L<Mojolicious> app, far from it.
Feel free to use it in any circumstance that needs XML-RPC messages.

=head1 MAPPING

The mapping between Perl types and XMLRPC types is not perfectly one-to-one, especially given Perl's scalar types.
The following is a description of the procedure used to encode and decode XMLRPC message from/to Perl.

=head2 Perl to XMLRPC

If the item is a blessed reference:

=over

=item *

If the item/object implements a C<TO_XMLRPC> method, it is called and the result is encoded.

=item *

If the item is a L<JSON::PP::Boolean>, as the L<Mojo::JSON> booleans are, it is encoded as a C<boolean>.

=item *

If the item is a L<Mojo::Date> then it is encoded as a C<dateTime.iso8601>.

=item *

If the item is a L<Mojo::XMLRPC::Base64> then it is encode as a C<base64>.
This wrapper class is used to distinguish a string from a base64 and aid in encoding/decoding.

=item

If the item/object implements a C<TO_JSON> method, it is called and the result is encoded.

=item

If none of the above cases are true, the item is stringified and encoded as a C<string>.

=back

If the item is an unblessed reference:

=over

=item *

An array reference is encoded as an C<array>.

=item *

A hash reference is encoded as a C<struct>.

=item *

A scalar reference is encoded as a C<boolean> depending on the truthiness of the referenced value.
This is the standard shortcut seen in JSON modules allowing C<\1> for true and C<\0> for false.

=back

If the item is a non-reference scalar:

=over

=item *

If the item is undefined it is encoded as C<< <nil/> >>.

=item *

If the item has C<NOK> (it has been used as a floating point number) it is encoded as C<double>.

=item *

If the item has C<IOK> (it has been used as an integer (and not a float)) it is encoded as a C<double>.

=item *

All other values are encoded as C<string>.

=back

=head2 XMLRPC to Perl

Most values decode back into Perl in a manner that would survive a round trip.
The exceptions are blessed objects that implement C<TO_XMLRPC> or C<TO_JSON> or are stringified.
The shortcuts for booleans will round-trip to being L<Mojo::JSON> booleans objects.

Values encoded as integers will not be truncated via C<int> however no attempt is made to upgrade them to C<IOK> or C<NOK>.
Values encoded as floating point C<double> will be forcably upgraded to C<NOK> (by dividing by 1.0).
This is so that an integer value encoded as a floating point will round trip, the reverse case isn't as useful and thus isn't handled.

=head1 FUNCTIONS

=head2 decode_xmlrpc

Like L</from_xmlrpc> but first decodes from UTF-8 encoded bytes.

=head2 encode_xmlrpc

Like L</to_xmlrpc> but encodes the result to UTF-8 encoded bytes.

=head2 from_xmlrpc

Takes a character string, interprets it, and returns a L<Mojo::XMLRPC::Message> containing the result.
If the input is UTF-8 encoded bytes, you can use L</decode_xmlrpc> instead.

=head2 to_xmlrpc

Generates an XMLRPC message from data passed to the function.
The input may be a L<Mojo::XMLRPC::Message> or it could be of the following form.

=over

=item *

A message type, one of C<method>, C<response>, C<fault>.

=item *

If the message type is C<method>, then the method name.

=item *

If the message is a C<fault>, then the fault code followed by the fault string.

=item *

If the message is not a C<fault>, then all remaining arguments are parameters.
If the message is a C<fault>, all remaining arguments are ignored.

=back

The return value is a character string.
To generate UTF-8 encoded bytes, you can use L</encode_xmlrpc> instead.

=head1 THANKS

This module was inspired by L<XMLRPC::Fast> written by SÃ©bastien Aperghis-Tramoni.

L<Mojo::XMLRPC> was a port of that module initially to use the L<Mojo::DOM> module rather than L<XML::Parser>.
By the time port to the Mojo stack was complete, the module was entirely rewritten.
That said, the algorithm still owes a debt of gratitude to that one.

=head1 SOURCE REPOSITORY

L<http://github.com/jberger/Mojo-XMLRPC>

=head1 AUTHOR

Joel Berger, E<lt>joel.a.berger@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2017 by Joel Berger
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
